// This file is generated. Edit layer.gen.hpp.ejs, then run `make style-code`.

#include <mbgl/style/conversion.hpp>
#include <mbgl/style/conversion/constant.hpp>
#include <mbgl/style/conversion/property_value.hpp>

<% for (const layer of locals.layers) { -%>
#include <mbgl/style/layers/<%- layer.type %>_layer.hpp>
<% } -%>

#include <functional>
#include <string>
#include <unordered_map>

namespace mbgl {
namespace style {
namespace conversion {

template <class V>
using PropertySetter = std::function<optional<Error> (Layer&, const V&)>;

template <class V>
using PropertySetters = std::unordered_map<std::string, PropertySetter<V>>;

template <class V, class L, class T>
PropertySetter<V> makePropertySetter(void (L::*setter)(PropertyValue<T>)) {
    return [setter] (mbgl::style::Layer& layer, const V& value) -> optional<Error> {
        L* typedLayer = layer.as<L>();
        if (!typedLayer) {
            return Error { "layer doesn't support this property" };
        }

        Result<PropertyValue<T>> typedValue = convert<PropertyValue<T>>(value);
        if (!typedValue) {
            return typedValue.error();
        }

        (typedLayer->*setter)(*typedValue);
        return {};
    };
}

template <class V>
optional<Error> setVisibility(Layer& layer, const V& value) {
    Result<VisibilityType> visibility = convert<VisibilityType>(value);
    if (!visibility) {
        return visibility.error();
    }

    layer.setVisibility(*visibility);
    return {};
}

template <class V>
PropertySetters<V> makeLayoutPropertySetters() {
    PropertySetters<V> result;

    result["visibility"] = &setVisibility<V>;

<% for (const layer of locals.layers) { -%>
<% for (const property of layer.layoutProperties) { -%>
    result["<%- property.name %>"] = makePropertySetter<V>(&<%- camelize(layer.type) %>Layer::set<%- camelize(property.name) %>);
<% } -%>

<% } -%>
    return result;
}

template <class V>
PropertySetters<V> makePaintPropertySetters() {
    PropertySetters<V> result;

<% for (const layer of locals.layers) { -%>
<% for (const property of layer.paintProperties) { -%>
    result["<%- property.name %>"] = makePropertySetter<V>(&<%- camelize(layer.type) %>Layer::set<%- camelize(property.name) %>);
<% } -%>

<% } -%>
    return result;
}

} // namespace conversion
} // namespace style
} // namespace mbgl
